#-*- coding: UTF-8 -*- 

from django.shortcuts import render,render_to_response
from django.http import HttpResponse,HttpResponseRedirect
from django.contrib.auth import login as auth_login
from django.contrib.auth import logout as auth_logout
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from blog.models import Blog
from data.models import Data
from home.models import UserProfile
from django.http import Http404

from .forms import RegisterForm,LoginForm,CareerForm
from django.contrib.auth.decorators import login_required,permission_required
from django.views.decorators.csrf import csrf_exempt

# Create your views here.

def index(request):
    return render(request,'home_index.html')
    
def register(request):
    
    if request.method=="POST":
        form=RegisterForm(request.POST)
        if form.is_valid():
            user=User.objects.create_user(
                username=form.cleaned_data['name'],
                password=form.cleaned_data['password1'],
                email=form.cleaned_data['email'],
                )
            user.save()
            user_profile=UserProfile.objects.create(user=user,has_profile='1')    
            return HttpResponseRedirect('/login')
    else:
        form=RegisterForm()
    
    return render(request,'home_register.html',{'form':form})
    
def login(request):
    errors=[]
    if request.method=="POST":
        form=LoginForm(request.POST)
        if form.is_valid():
            email=form.cleaned_data['email']
            try:
                username=User.objects.get(email=form.cleaned_data['email']).username
            except User.DoesNotExist:
                errors.append('这个邮箱没有用户')
            else:
                user=authenticate(username=username,password=form.cleaned_data['password'])
                if user is not None:
                    if user.is_active:
                        auth_login(request,user)
                        return HttpResponseRedirect('/')
                    else:
                        errors.append('你的用户没有激活')
                else:
                    errors.append('错误的用户名或密码')
            
                
    else:
        form=LoginForm()
    return render(request,'home_login.html',{'form':form,'errors':errors})
     
def person(request,id):
    try:
        the_user=User.objects.get(id=id)
    except User.DoesNotExist:
        raise Http404

       
    blogs=the_user.blog_set.all()[::-1]
    datas=the_user.data_set.all()[::-1]
    return render(request,"home_person.html",{"the_user":the_user,"datas":datas,"blogs":blogs})



                    
def logout(request):
    auth_logout(request)
    return HttpResponseRedirect('/')            
        

def my_404_view(request):
    return render(request,'my_404.html')

@csrf_exempt
@login_required(login_url='/login')
def career(request):
    if request.user.is_superuser:
            return HttpResponseRedirect('/')
    if request.user.userprofile.has_avatar:
        avatar_existed=True
    else:
        avatar_existed=False
    if request.method=="POST":
        form=CareerForm(request.POST,request.FILES)
        if form.is_valid():
            if request.user.userprofile.has_profile:
                user_profile=request.user.userprofile
                user_profile.name=form.cleaned_data['name']
                user_profile.sex=form.cleaned_data['sex']
                user_profile.subject=form.cleaned_data['subject']
                user_profile.classname=form.cleaned_data['classname']
                user_profile.birthday=form.cleaned_data['birthday']
                user_profile.race=form.cleaned_data['race']
                user_profile.avatar=form.cleaned_data['avatar']
                user_profile.has_avatar='1'
                user_profile.introduction=form.cleaned_data['introduction']
                user_profile.something=form.cleaned_data['something']
                user_profile.make_sure_to_join=form.cleaned_data['make_sure_to_join']
                user_profile.team=form.cleaned_data['team']
                user_profile.save()
            else:
                user_profile=request.user.userprofile
                user_profile.has_profile='1'
                user_profile.name=form.cleaned_data['name']
                user_profile.sex=form.cleaned_data['sex']
                user_profile.subject=form.cleaned_data['subject']
                user_profile.classname=form.cleaned_data['classname']
                user_profile.birthday=form.cleaned_data['birthday']
                user_profile.race=form.cleaned_data['race']
                user_profile.avatar=form.cleaned_data['avatar']
                user_profile.has_avatar='1'
                user_profile.introduction=form.cleaned_data['introduction']
                user_profile.something=form.cleaned_data['something']
                user_profile.make_sure_to_join=form.cleaned_data['make_sure_to_join']
                user_profile.team=form.cleaned_data['team']
                user_profile.save()
                
            return HttpResponseRedirect('/')
        else:
#        	if request.user.userprofile.avatar:
#                 avatar_existed=True
            
            return render(request,"home_career.html",{"form":form,"avatar_existed":avatar_existed})
    else:
        
        
        if request.user.userprofile.has_avatar:
            user_profile=request.user.userprofile
            form_data={"name":user_profile.name,
                                "sex":user_profile.sex,
                                "subject":user_profile.subject,
                                "classname":user_profile.classname,
                                "birthday":user_profile.birthday,
                                "race":user_profile.race,
                                "contact":user_profile.contact,
                                "introduction":user_profile.introduction,
                                "something":user_profile.something,
                                "make_sure_to_join":user_profile.make_sure_to_join,
                                "team":user_profile.team}
            form=CareerForm(form_data)
#            avatar_existed=True
        else:
            form=CareerForm()

    return render(request,"home_career.html",{"form":form,"avatar_existed":avatar_existed})


def join_show(request):
    try:
        user_profile=UserProfile.objects.filter(make_sure_to_join='1').filter(has_been_deal_with=False)
    except UserProfile.DoesNotExist:
        user_profile=[]
    return render(request,"home_join_show.html",{"user_profile":user_profile})
